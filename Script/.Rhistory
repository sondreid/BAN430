fc_dynamic_naive_forecastobject,
fc_dynamic_arima) %>%
as_tsibble(key = Model,
index = date)
# Forecast ARIMA model with ARIMA and NAIVE forecasted predictors cpi and export
fc_dynamic <- bind_rows(
fc_dynamic_naive_forecastobject,
fc_dynamic_arima_forecast) %>%
as_tsibble(key = Model,
index = date)
fc_dynamic_naive_forecastobject
bind_rows(
fc_dynamic_naive_forecastobject,
fc_dynamic_arima_forecastobject)
# Forecast ARIMA model with ARIMA and NAIVE forecasted predictors cpi and export
fc_dynamic <- bind_cols(
fc_dynamic_naive_forecastobject,
fc_dynamic_arima_forecastobject)
fc_dynamic
fc_dynamic_naive_forecastobject
fc_dynamic_arima <- forecast(fit_dynamic_arima,
new_data = fc_predictors_arima) %>%
mutate(Model = c("Predictor ARIMA"))
fc_dynamic_naive <- forecast(fit_dynamic_arima,
new_data = fc_predictors_naive)  %>%
mutate(Model = c("Predictor NAIVE"))
fc_dynamic %>%
ggplot() +
geom_line(aes(x = date, y  = .mean, color = Model)) +
geom_line(aes(x = date, y = unemployed, color = "Observed"), data = unemployment_test_ts) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot()
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima) +
autolayer(fc_dynamic_arima)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, level = 95) +
autolayer(fc_dynamic_arima)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, level = 95) +
autolayer(fc_dynamic_arima, level = 95)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, level = 95) +
autolayer(fc_dynamic_arima, level = 95, alpha = 0.5)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, level = 95, alpha = 0.5) +
autolayer(fc_dynamic_arima, level = 95)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, level = 95)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, level = 95) +
autolayer(fc_dynamic_naive, level = 95, alpha = 0.5)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, col = Model, level = 95) +
autolayer(fc_dynamic_naive, col = Model, level = 95, alpha = 0.5)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = Model, level = 95) +
autolayer(fc_dynamic_naive, colour = Model, level = 95, alpha = 0.5)
fc_dynamic_arima
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = Model, level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = Model, level = 95, alpha = 0.5)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5)
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month")
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month")
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, series = "ARIMA", colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, serie = "ARIMA", colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "Model", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "Model", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "Model", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "Model", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = Model, level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = Model, level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = Model, level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.3) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.3) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.3) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.7) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.3) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 1) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.3) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 1) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.9) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 1) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.5) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 1) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
fc_dynamic %>%
ggplot() +
geom_line(aes(x = date, y  = .mean, color = Model)) +
geom_line(aes(x = date, y = unemployed, color = "Observed"), data = unemployment_test_ts) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
fc_dynamic <- bind_rows(
fc_dynamic_arima
)
fc_dynamic <- bind_rows(
fc_dynamic_arima,
fc_dymaic_naive
)
fc_dynamic_arima
fc_dymaic_naive
fc_dynamic <- bind_rows(
fc_dynamic_arima,
fc_dynamic_naive
)
fc_dynamic_naive
fc_dynamic_arima <- forecast(fit_dynamic_arima,
new_data = fc_predictors_arima) %>%
mutate(Model = c("Predictor ARIMA")) %>%
as_tsibble()
forecast(fit_dynamic_arima,
new_data = fc_predictors_arima) %>%
mutate(Model = c("Predictor ARIMA")) %>%
as_tsibble()
fc_dynamic_arima <- forecast(fit_dynamic_arima,
new_data = fc_predictors_arima) %>%
mutate(Model = c("Predictor ARIMA")) %>%
as_sibble()
fc_dynamic_arima <- forecast(fit_dynamic_arima,
new_data = fc_predictors_arima) %>%
mutate(Model = c("Predictor ARIMA")) %>%
as_tibble()
forecast(fit_dynamic_arima,
new_data = fc_predictors_arima) %>%
mutate(Model = c("Predictor ARIMA")) %>%
as_tibble()
fc_dynamic_arima <- forecast(fit_dynamic_arima,
new_data = fc_predictors_arima) %>%
mutate(Model = c("Predictor ARIMA")) %>%
as_tibble(index = date)
fc_dynamic <- bind_rows(
fc_dynamic_arima,
fc_dynamic_naive
)
fc_dynamic_naive <- forecast(fit_dynamic_arima,
new_data = fc_predictors_naive)  %>%
mutate(Model = c("Predictor NAIVE")) %>%
as_tibble(index = date)
fc_dynamic <- bind_rows(
fc_dynamic_arima,
fc_dynamic_naive
)
bind_rows(
fc_dynamic_arima,
fc_dynamic_naive
)
fc_dynamic %>%
ggplot() +
geom_line(aes(x = date, y  = .mean, color = Model)) +
geom_line(aes(x = date, y = unemployed, color = "Observed"), data = unemployment_test_ts) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive, colour = "orange", level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month")
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima_forecastobject, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive_forecastobject, colour = "orange", level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month")
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima_forecastobject, colour = .model, level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive_forecastobject, colour = .model, level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month")
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima_forecastobject, series = "Predictor", colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive_forecastobject, colour = "orange", level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month")
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima_forecastobject, fill = "Predictor", colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive_forecastobject, colour = "orange", level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month")
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima_forecastobject, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive_forecastobject, colour = "orange", level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month")
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima_forecastobject, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive_forecastobject, colour = "orange", level = 95, alpha = 0.2) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange"))
unemployment_test_ts %>%
autoplot() +
autolayer(fc_dynamic_arima_forecastobject, colour = "blue", level = 95, alpha = 0.5) +
autolayer(fc_dynamic_naive_forecastobject, colour = "orange", level = 95, alpha = 0.2) +
theme_bw()
# Forecast of ARIMA model with ARIMA and NAIVE forecasted predictors
fc_dynamic %>%
ggplot() +
geom_line(aes(x = date, y  = .mean, color = Model)) +
geom_line(aes(x = date, y = unemployed, color = "Observed"), data = unemployment_test_ts) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
# Forecast of ARIMA model with ARIMA and NAIVE forecasted predictors
fc_dynamic %>%
ggplot() +
geom_line(aes(x = date, y  = .mean, color = Model)) +
geom_line(aes(x = date, y = unemployed, color = "Observed"), data = unemployment_test_ts) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
subtitle = fit_dynamic_arima,
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
# Forecast of ARIMA model with ARIMA and NAIVE forecasted predictors
fc_dynamic %>%
ggplot() +
geom_line(aes(x = date, y  = .mean, color = Model)) +
geom_line(aes(x = date, y = unemployed, color = "Observed"), data = unemployment_test_ts) +
theme_bw() +
scale_colour_manual(values=c("black", "#56B4E9", "orange")) +
theme(legend.position = "bottom") +
labs(title = "Dynamic forecast",
subtitle = fit_dynamic_arima$`ARIMA(unemployed ~ cpi + export, stepwise = FALSE, approximation = FALSE)`,
y = "Unemployment level",
x = "Month") +
guides(colour = guide_legend(title = "Series"))
ggtsdisplay(Residual,
plot.type = "histogram",
lag.max = 24,
theme = theme_bw(),
main = "Residuals of multivariate model")
Residual <- (fit_dynamic_arima  %>% augment())$.innov
ggtsdisplay(Residual,
plot.type = "histogram",
lag.max = 24,
theme = theme_bw(),
main = "Residuals of multivariate model")
